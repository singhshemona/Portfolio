{"version":3,"sources":["images/logos/linkedin.svg","images/logos/notion.svg","images/logos/dev.svg","images/logos/github.svg","images/logos/behance.svg","scripts/components/ui/ExternalLink/ExternalLink.tsx","scripts/components/ui/Header/Header.tsx","scripts/components/ui/Button/Button.tsx","scripts/components/ui/OpeningText/OpeningText.tsx","scripts/components/App/App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","ExternalLink","link","content","target","className","href","rel","Header","src","LinkedinLogo","alt","NotionLogo","BehanceLogo","GithubLogo","DevToLogo","Button","level","onClick","type","aria-label","OpeningText","window","location","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,uMCS9BC,G,YAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,OAAlB,OAC1B,uBAAGC,UAAY,QAAUD,EAASE,KAAOJ,EAAOE,OAAO,SAASG,IAAI,uBAChEJ,K,gFC6BSK,EA/BA,WACb,OACE,4BAAQH,UAAU,cAChB,kBAAC,EAAD,CACEH,KAAK,4CACLC,QACE,yBAAKM,IAAKC,IAAcC,IAAI,oBAGhC,kBAAC,EAAD,CACET,KAAK,6EACLC,QACE,yBAAKM,IAAKG,IAAYD,IAAI,kBAG9B,kBAAC,EAAD,CACET,KAAK,gDACLC,QAAS,yBAAKM,IAAKI,IAAaF,IAAI,kBAEtC,kBAAC,EAAD,CACET,KAAK,kCACLC,QAAS,yBAAKM,IAAKK,IAAYH,IAAI,kBAErC,kBAAC,EAAD,CACET,KAAK,8BACLC,QAAS,yBAAKM,IAAKM,IAAWJ,IAAI,oBCzB7BK,G,YAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOd,EAAV,EAAUA,QAASe,EAAnB,EAAmBA,QAAnB,OACpB,4BAAQC,KAAK,SAASd,UAAYY,EAAQC,QAAUA,EAAUE,aAAajB,GACvEA,KCgBSkB,EAtBK,WAClB,OACE,yBAAKhB,UAAU,gBACb,8CAAmB,0BAAMA,UAAU,UAAhB,UAAnB,SAA+D,sCAA/D,KACA,kEACsC,IACpC,kBAAC,EAAD,CACAH,KAAK,0BACLC,QAAQ,gBAGV,kBAAC,EAAD,CACEc,MAAM,iBACNd,QAAQ,oBACRe,QAAS,kBACPI,OAAOC,SAASjB,KAAK,qE,MCNhBkB,MATf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcoB,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.45e66797.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linkedin.84a607a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/notion.56c92251.svg\";","module.exports = __webpack_public_path__ + \"static/media/dev.453b538d.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.07883e93.svg\";","module.exports = __webpack_public_path__ + \"static/media/behance.05dc0473.svg\";","import React from 'react';\nimport './ExternalLink.scss';\n\ntype Props = {\n  link: string,\n  content: any,\n  target?: string,\n}\n\nexport const ExternalLink = ({ link, content, target }: Props) =>\n  <a className={ 'link ' + target } href={ link } target=\"_blank\" rel=\"noopener noreferrer\">\n    { content }\n  </a>","import React from 'react';\nimport './Header.scss';\nimport { ExternalLink } from '../ExternalLink/ExternalLink';\nimport LinkedinLogo from 'images/logos/linkedin.svg';\nimport NotionLogo from 'images/logos/notion.svg';\nimport DevToLogo from 'images/logos/dev.svg';\nimport GithubLogo from 'images/logos/github.svg';\nimport BehanceLogo from 'images/logos/behance.svg';\n\nconst Header = () => {\n  return (\n    <header className=\"navigation\">\n      <ExternalLink\n        link=\"https://www.linkedin.com/in/shemonasingh/\"\n        content={\n          <img src={LinkedinLogo} alt=\"Linkedin Logo\" />\n        }\n      />\n      <ExternalLink\n        link=\"https://www.notion.so/shemona/Get-Started-cb739b6a13ce490ba1d422f204397071\"\n        content={\n          <img src={NotionLogo} alt=\"Notion Logo\" />\n        }\n      />\n      <ExternalLink\n        link=\"https://www.behance.net/singhshemona/projects\"\n        content={<img src={BehanceLogo} alt=\"Github Logo\" />}\n      />\n      <ExternalLink\n        link=\"https://github.com/singhshemona\"\n        content={<img src={GithubLogo} alt=\"Github Logo\" />}\n      />\n      <ExternalLink\n        link=\"https://dev.to/singhshemona\"\n        content={<img src={DevToLogo} alt=\"Dev to Logo\" />}\n      />\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './Button.scss';\n\ntype Props = {\n  level: string,\n  content: any,\n  onClick?: () => (any),\n}\n\nexport const Button = ({ level, content, onClick }: Props) =>\n  <button type=\"button\" className={ level } onClick={ onClick } aria-label={ content }>\n    { content }\n  </button>","import React from 'react';\nimport './OpeningText.scss';\nimport { ExternalLink } from '../ExternalLink/ExternalLink';\nimport { Button } from '../Button/Button';\n\nconst OpeningText = () => {\n  return (\n    <div className=\"opening-text\" >\n      <h1>I'm Shemona, I <span className=\"design\">design</span> with <code>code</code>.</h1>\n      <h2>\n        Currently a Design Technologist at {' '}\n        <ExternalLink\n        link=\"https://www.indeed.com/\"\n        content=\"Indeed.com\"\n        />\n      </h2>\n      <Button\n        level=\"primary-button\"\n        content=\"Let's Collaborate\"\n        onClick={() =>\n          window.location.href='https://www.linkedin.com/in/shemonasingh/detail/contact-info/'\n        }\n      />\n    </div>\n  );\n}\n\nexport default OpeningText;\n","import React from 'react';\nimport Header from '../ui/Header/Header';\nimport OpeningText from '../ui/OpeningText/OpeningText';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <OpeningText />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './scripts/components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}